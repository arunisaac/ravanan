#!/usr/bin/env sh
# -*- mode: scheme; -*-
exec guile --no-auto-compile -e main -s "$0" "$@"
!#
;;; ravanan --- High-reproducibility CWL runner powered by Guix
;;; Copyright Â© 2024, 2025 Arun Isaac <arunisaac@systemreboot.net>
;;;
;;; This file is part of ravanan.
;;;
;;; ravanan is free software: you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; ravanan is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with ravanan.  If not, see <https://www.gnu.org/licenses/>.

(use-modules (rnrs exceptions)
             (rnrs io ports)
             (srfi srfi-26)
             (srfi srfi-37)
             (ice-9 filesystem)
             (ice-9 match)
             (web uri)
             (json)
             (ravanan batch-system)
             (ravanan config)
             (ravanan reader)
             (ravanan utils)
             (ravanan verbosity)
             (ravanan workflow)
             (ravanan work utils))

(define %options
  (list (option (list "batch-system" "batchSystem") #t #f
                (lambda (opt name arg result)
                  (if (member arg (list "single-machine" "slurm-api"))
                      (acons 'batch-system (string->symbol arg)
                             result)
                      (error "Unknown batch system" arg))))
        (option (list "guix-channels") #t #f
                (lambda (opt name arg result)
                  (acons 'guix-channels-file arg result)))
        (option (list "guix-daemon-socket") #t #f
                (lambda (opt name arg result)
                  (acons 'guix-daemon-socket arg result)))
        (option (list "guix-manifest") #t #f
                (lambda (opt name arg result)
                  (acons 'guix-manifest-file arg result)))
        (option (list "scratch") #t #f
                (lambda (opt name arg result)
                  (acons 'scratch arg result)))
        (option (list "store") #t #f
                (lambda (opt name arg result)
                  (acons 'store arg result)))
        (option (list "slurm-api-endpoint") #t #f
                (lambda (opt name arg result)
                  (acons 'slurm-api-endpoint arg result)))
        (option (list "slurm-jwt") #t #f
                (lambda (opt name arg result)
                  (acons 'slurm-jwt arg result)))
        (option (list "slurm-partition") #t #f
                (lambda (opt name arg result)
                  (acons 'slurm-partition arg result)))
        (option (list "slurm-nice") #t #f
                (lambda (opt name arg result)
                  (acons 'slurm-nice (string->number arg)
                         result)))
        ;; The shorter outdir form is to maintain compatibility with cwltool and
        ;; cwltest.
        (option (list "output-directory" "outdir") #t #f
                (lambda (opt name arg result)
                  (acons 'outdir arg
                         result)))
        (option (list "trace") #t #f
                (lambda (opt name arg result)
                  (let ((accepted-values (list "slurm-api")))
                    (if (member arg accepted-values)
                        (assoc-set result
                          (cons 'traces
                                (cons (string->symbol arg)
                                      (assq-ref result 'traces))))
                        (error "Unknown trace subsystem" arg)))))
        (option (list "help") #f #t
                (lambda (opt name arg result)
                  (acons 'help #t result)))
        (option (list "version") #f #f
                (lambda (opt name arg result)
                  (acons 'version #t result)))))

(define (invalid-option opt name arg result)
  (error "Invalid option" name))

(define (print-usage program)
  (format (current-error-port)
          "Usage: ~a [OPTIONS] CWL-WORKFLOW INPUTS
Run CWL-WORKFLOW with INPUTS.

  --output-directory=DIRECTORY
  --outdir=DIRECTORY             output directory
  --version                      print version and exit

  --batch-system=BATCH-SYSTEM    batch system to run jobs on;
                                 Supported batch systems are single-machine (default) and slurm-api
  --scratch=SCRATCH              path to scratch area on worker nodes
                                 scratch need not be shared
                                 (default: current directory with the single-machine batch system)
  --store=STORE                  path to shared store to write results into

Guix options:

  --guix-channels=GUIX_CHANNELS              guix channels file to build profiles on
  --guix-daemon-socket=GUIX_DAEMON_SOCKET    guix daemon to connect to
  --guix-manifest=GUIX_MANIFEST              guix manifest to run jobs with

Slurm API batch system options:

  --slurm-api-endpoint=SLURM-API-ENDPOINT    slurm API endpoint to connect to
  --slurm-jwt=SLURM-JWT                      slurm JWT to authenticate with
  --slurm-partition=SLURM-PARTITION          slurm partition to request
  --slurm-nice=SLURM-NICE                    slurm job priority adjustment

Debugging options:

  --trace=SUBSYSTEM              enable tracing on subsystem;
                                 repeat to trace multiple subsystems
                                 (accepted values: slurm-api)"
          program))

(define (read-jwt file)
  "Read JWT token from @var{file}. Support both files that only have the token and
files that have the token in the @verbatim{SLURM_JWT=token} format."
  ;; We support the SLURM_JWT=token format because that's how `scontrol token'
  ;; outputs it.
  (call-with-input-file file
    (compose (cut string-trim-prefix "SLURM_JWT=" <>)
             string-trim-both
             get-string-all)))

(define (symlink-to-output-directory store output-directory tree)
  "Symlink @code{File} or @code{Directory} type objects in JSON @var{tree} from the
@var{store} into @var{output-directory}. Return @var{tree} with updated
@code{path} properties."
  (cond
   ;; Array
   ((vector? tree)
    (vector-map (cut symlink-to-output-directory store output-directory <>)
                tree))
   ;; Object
   ((list? tree)
    ;; We cannot use object-type to determine the type since it would error out
    ;; when it cannot determine the type.
    (if (member (assoc-ref tree "class")
                (list "File" "Directory"))
        ;; If File or Directory, symlink it to output directory, and update
        ;; path.
        (let ((output-directory-path
               (match (file-name-split
                       (relative-file-name (assoc-ref tree "path")
                                           (expand-file-name %store-files-directory
                                                             store)))
                 ((_ parts ...)
                  (expand-file-name (file-name-join parts)
                                    output-directory)))))
          ;; Symlink file or directory to output directory.
          (symlink (assoc-ref tree "path")
                   output-directory-path)
          ;; Update path.
          (assoc-set tree
            (cons "path" output-directory-path)))
        ;; Else, recurse.
        (map (match-lambda
               ((key . value)
                (cons key
                      (symlink-to-output-directory store output-directory value))))
             tree)))
   ;; Atom
   (else tree)))

(define main
  (match-lambda
    ((program args ...)
     (let ((args (args-fold args
                            %options
                            invalid-option
                            (lambda (arg result)
                              (acons 'args
                                     (cons arg (or (assq-ref result 'args)
                                                   '()))
                                     result))
                            `((batch-system . single-machine)
                              (slurm-api-endpoint . ,(build-uri 'http
                                                                #:host "localhost"
                                                                #:port 6820))
                              (traces . ())))))
       (when (assq-ref args 'help)
         (print-usage program)
         (exit #t))
       (when (assq-ref args 'version)
         (format (current-output-port)
                 "~a ~a~%"
                 %project %version)
         (exit #t))
       ;; Check for required arguments.
       (unless (assq-ref args 'store)
         (error "--store not specified"))
       (case (assq-ref args 'batch-system)
         ((slurm-api)
          (unless (assq-ref args 'scratch)
            (error "--scratch not specified"))
          (unless (assq-ref args 'slurm-jwt)
            (error "--slurm-jwt not specified"))))
       (match (reverse (assq-ref args 'args))
         ((workflow-file inputs-file)
          ;; We must not try to compile guix manifest files.
          (set! %load-should-auto-compile #f)
          (let* ( ;; FIXME: This is a bit of a hack to avoid canonizing remote
                 ;; paths.
                 (store (if (file-name-absolute? (assq-ref args 'store))
                            (assq-ref args 'store)
                            (canonicalize-path (assq-ref args 'store))))
                 (outputs (guard (c ((manifest-file-error? c)
                                     ;; Steps may provide their own
                                     ;; SoftwareRequirement. So, at this point, we do
                                     ;; not know if a manifest file is required and
                                     ;; can't check for these manifest file errors
                                     ;; right away. Instead, we depend on exceptions
                                     ;; bubbled up from lower down the stack.
                                     (let ((file (manifest-file-error-file c)))
                                       (cond
                                        ((not file)
                                         (error "--guix-manifest not specified"))
                                        ((not (file-exists? file))
                                         (error "Manifest file ~a does not exist"
                                                file))
                                        (else
                                         (error "Error loading manifest file"
                                                file)
                                         (raise-exception c))))))
                            (parameterize ((%traces (assq-ref args 'traces)))
                              (run-workflow (file-name-stem workflow-file)
                                            (and (assq 'guix-manifest-file args)
                                                 (canonicalize-path
                                                  (assq-ref args 'guix-manifest-file)))
                                            (and (assq-ref args 'guix-channels-file)
                                                 (load-script
                                                  (canonicalize-path
                                                   (assq-ref args 'guix-channels-file))
                                                  #:modules '((guile)
                                                              (guix channels))))
                                            (read-workflow workflow-file)
                                            (read-inputs inputs-file)
                                            (case (assq-ref args 'batch-system)
                                              ((single-machine)
                                               (or (assq-ref args 'scratch)
                                                   (getcwd)))
                                              ((slurm-api)
                                               (assq-ref args 'scratch)))
                                            store
                                            (case (assq-ref args 'batch-system)
                                              ((single-machine) 'single-machine)
                                              ((slurm-api)
                                               (slurm-api-batch-system
                                                (assq-ref args 'slurm-api-endpoint)
                                                (and (assq-ref args 'slurm-jwt)
                                                     (read-jwt (assq-ref args 'slurm-jwt)))
                                                (assq-ref args 'slurm-partition)
                                                (assq-ref args 'slurm-nice))))
                                            #:guix-daemon-socket (assq-ref args 'guix-daemon-socket))))))
            (scm->json (if (assq-ref args 'outdir)
                           (symlink-to-output-directory store
                                                        (assq-ref args 'outdir)
                                                        outputs)
                           outputs)
                       #:pretty #t))
          (newline)))))))
